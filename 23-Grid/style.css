/*? CSS Grid Layout, often referred to simply as Grid, is a two-dimensional layout system in CSS that allows you to design complex web layouts with rows and columns. It provides a highly flexible and precise way to arrange and align content on a webpage.  */

/*? 1:Two-Dimensional Grid: */
/** Unlike traditional layout models, such as the box model and Flexbox, CSS Grid is a two-dimensional layout system. It simultaneously manages both rows and columns. */

/** 2: Grid Container and Grid Items: */
/*? A grid layout consists of a grid container and its grid items. */
/*? The grid container is an element that contains grid items. It's often an immediate parent element. */
/*? Grid items are the children of the grid container, and they are positioned within the grid. */
/*? The grid container must have display:grid;  */

/** 3: Defining the Grid: */
/*? To create a grid, you first define the columns and rows. */
/*? Use the grid-template-columns and grid-template-rows properties to set the sizes and structure of the grid. */
/*? Columns and rows can be specified as fixed sizes (e.g., pixels) or flexible sizes (e.g., percentages, fractions). */

/** 4: Grid Lines and Tracks: */
/*? Grid lines are the dividing lines between columns and rows. */
/*? Tracks are the lines from starting to ending, row wise lines are called rows and column wise lines are called columns. */
/*? You can name grid lines and tracks for better organization. */

/** 5. Placing Grid Items: */
/*? Grid items are placed within the grid using the grid-column and grid-row properties. */
/*? You can also use the shorthand property grid-area to specify both column and row placement in a single declaration. */

/*? The grid-area property specifies a grid item's size and location in a grid layout, and is a shorthand property for the following properties:

grid-row-start
grid-column-start
grid-row-end
grid-column-end */

/*? Explicit vs Implicit grid  */

/** 6. Grid Gaps: */
/*? Grid gaps are the spaces between grid items and tracks. */
/*? You can control gaps between columns and rows separately using the grid-column-gap and grid-row-gap properties or the shorthand grid-gap. */

/*! This property is a shorthand for the following CSS properties: The gap CSS shorthand property sets the gaps (gutters) between rows and columns. */

/* column-gap */
/* row-gap */
/* gap */

/** 7. Grid Auto: */
/*? Grid items can be automatically placed using grid-auto-flow. By default, they fill rows, but you can change this behavior to fill columns. */
/*? grid-auto-rows and grid-auto-columns control the size of automatically placed items. */

/** 8. Responsive Grids: */
/*? CSS Grid is highly responsive. Grid items can be repositioned and resized automatically as the viewport size changes. */
/*? Use media queries to adjust grid layouts for different screen sizes. */

/** 9. Alignment and Justification: */
/*? You can align and justify content within grid items and the grid container itself. */
/*? Properties like justify-items, align-items, justify-content, and align-content help you control alignment and spacing. */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: sans-serif;
}

body {
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #2c3639;
}

.grid-container {
  width: 80%;
  margin: 100px auto;
  background-color: #dcd7c9;
  color: #fff;
  box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,
    rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,
    rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;

  /* grid starts here  */
  display: grid;

  /* both are same */
  grid-template-rows: 250px 250px;
  grid-template-rows: repeat(2, 250px);

  /** grid-auto-rows property  */
  grid-auto-rows: 250px;

  grid-template-columns: 250px 250px 250px;
  grid-template-columns: 250px 250px 1fr;
  grid-template-columns: 250px 250px;
  grid-template-columns: 250px 1fr;

  /* grid-template-rows: 250px 250px 250px;
  grid-template-columns: 250px 1fr; */

  grid-template-columns: 3fr 2fr 1fr;
  grid-template-columns: 1fr 2fr 3fr;

  /* both are same */
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-columns: repeat(3, 1fr);

  /** min-content, max-content, minmax, auto-fill  */

  /*? it will give the width to column-2 in which its greatest word takes place  */
  grid-template-columns: 1fr min-content repeat(1, 1fr);

  /*? it will give the width to column-2 in which its whole sentence takes place  */
  grid-template-columns: 1fr max-content repeat(1, 1fr);

  /*? it will set min. and max. width of column-2  */
  grid-template-columns: 1fr minmax(250px, 1fr) repeat(1, 1fr);

  /*? it will set min. 250px and max. 1fr width for all 3 columns  */
  grid-template-columns: repeat(3, minmax(250px, 1fr));

  /*? auto-fill makes column automatically according to the space  */
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));

  /* grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); */

  /*? this will be used for laptop, etc.  */
  grid-template-columns: repeat(3, minmax(250px, 1fr));

  /*? gaps  */
  /** deprecated properties*/
  /* grid-row-gap: 50px; */
  /* grid-column-gap: 50px; */
  /* grid-gap: 50px; */
  /** available properties*/
  /* row-gap: 50px;
  column-gap: 50px; */
  /** shorthand */
  gap: 50px;

  /*? align  */
  /* align-items: center; */
  /* align-items: start; */
  /* align-items: end; */
  /* align-items: stretch; */

  /*? justify horizontally  */
  /* justify-items: start; */
  /* justify-items: center; */
  /* justify-items: end; */
  /* justify-items: stretch; */
}

/** for responsive design  */
@media (width < 1200px) {
  .grid-container {
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  }
}

.item {
  display: grid;
  place-items: center;
  text-transform: uppercase;
  font-size: 20px;
  letter-spacing: 2px;
  font-weight: bold;
}

/* we can change the positions easily  */

.item-1 {
  background-color: #662549;
  /** item-1 starts from row-1 and ends at row-2 we can change its position */
  /* grid-row-start: 2; */
  /* grid-row-end: 3; */
  /** shorthand  */
  /* grid-row: 2 / 3; */

  /** item-1 starts from column-1 and ends at column-2 we can change its position */
  /* grid-column-start: 3;
  grid-column-end: 4; */
  /** shorthand  */
  /* grid-column: 3 / 4; */

  /** we can use this  */
  /** grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end;  */
  /* grid-area: 1 / 2 / 2 / 3; */
}
.item-2 {
  background-color: #113946;
}
.item-3 {
  background-color: #041630;
  /* grid-area: 1 / 2 / 2 / 3; */
  /* grid-row: 1/2; */
  /* grid-column: 2/4; */
}
.item-4 {
  background-color: #884a39;
}
.item-5 {
  background-color: #454545;
}
.item-6 {
  background-color: #85586f;
}
